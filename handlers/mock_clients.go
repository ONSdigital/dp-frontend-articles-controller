// Code generated by MockGen. DO NOT EDIT.
// Source: clients.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	template "html/template"
	io "io"
	reflect "reflect"

	articles "github.com/ONSdigital/dp-api-clients-go/v2/articles"
	zebedee "github.com/ONSdigital/dp-api-clients-go/v2/zebedee"
	model "github.com/ONSdigital/dp-renderer/model"
	gomock "github.com/golang/mock/gomock"
)

// MockClientError is a mock of ClientError interface.
type MockClientError struct {
	ctrl     *gomock.Controller
	recorder *MockClientErrorMockRecorder
}

// MockClientErrorMockRecorder is the mock recorder for MockClientError.
type MockClientErrorMockRecorder struct {
	mock *MockClientError
}

// NewMockClientError creates a new mock instance.
func NewMockClientError(ctrl *gomock.Controller) *MockClientError {
	mock := &MockClientError{ctrl: ctrl}
	mock.recorder = &MockClientErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientError) EXPECT() *MockClientErrorMockRecorder {
	return m.recorder
}

// Code mocks base method.
func (m *MockClientError) Code() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code")
	ret0, _ := ret[0].(int)
	return ret0
}

// Code indicates an expected call of Code.
func (mr *MockClientErrorMockRecorder) Code() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*MockClientError)(nil).Code))
}

// Error mocks base method.
func (m *MockClientError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockClientErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockClientError)(nil).Error))
}

// MockRenderClient is a mock of RenderClient interface.
type MockRenderClient struct {
	ctrl     *gomock.Controller
	recorder *MockRenderClientMockRecorder
}

// MockRenderClientMockRecorder is the mock recorder for MockRenderClient.
type MockRenderClientMockRecorder struct {
	mock *MockRenderClient
}

// NewMockRenderClient creates a new mock instance.
func NewMockRenderClient(ctrl *gomock.Controller) *MockRenderClient {
	mock := &MockRenderClient{ctrl: ctrl}
	mock.recorder = &MockRenderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenderClient) EXPECT() *MockRenderClientMockRecorder {
	return m.recorder
}

// BuildPage mocks base method.
func (m *MockRenderClient) BuildPage(w io.Writer, pageModel interface{}, templateName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuildPage", w, pageModel, templateName)
}

// BuildPage indicates an expected call of BuildPage.
func (mr *MockRenderClientMockRecorder) BuildPage(w, pageModel, templateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPage", reflect.TypeOf((*MockRenderClient)(nil).BuildPage), w, pageModel, templateName)
}

// BuildPageWithOptions mocks base method.
func (m *MockRenderClient) BuildPageWithOptions(w io.Writer, pageModel interface{}, templateName string, overrideFuncMap template.FuncMap) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuildPageWithOptions", w, pageModel, templateName, overrideFuncMap)
}

// BuildPageWithOptions indicates an expected call of BuildPageWithOptions.
func (mr *MockRenderClientMockRecorder) BuildPageWithOptions(w, pageModel, templateName, overrideFuncMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPageWithOptions", reflect.TypeOf((*MockRenderClient)(nil).BuildPageWithOptions), w, pageModel, templateName, overrideFuncMap)
}

// NewBasePageModel mocks base method.
func (m *MockRenderClient) NewBasePageModel() model.Page {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBasePageModel")
	ret0, _ := ret[0].(model.Page)
	return ret0
}

// NewBasePageModel indicates an expected call of NewBasePageModel.
func (mr *MockRenderClientMockRecorder) NewBasePageModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBasePageModel", reflect.TypeOf((*MockRenderClient)(nil).NewBasePageModel))
}

// MockZebedeeClient is a mock of ZebedeeClient interface.
type MockZebedeeClient struct {
	ctrl     *gomock.Controller
	recorder *MockZebedeeClientMockRecorder
}

// MockZebedeeClientMockRecorder is the mock recorder for MockZebedeeClient.
type MockZebedeeClientMockRecorder struct {
	mock *MockZebedeeClient
}

// NewMockZebedeeClient creates a new mock instance.
func NewMockZebedeeClient(ctrl *gomock.Controller) *MockZebedeeClient {
	mock := &MockZebedeeClient{ctrl: ctrl}
	mock.recorder = &MockZebedeeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZebedeeClient) EXPECT() *MockZebedeeClientMockRecorder {
	return m.recorder
}

// GetBreadcrumb mocks base method.
func (m *MockZebedeeClient) GetBreadcrumb(ctx context.Context, userAccessToken, collectionID, lang, uri string) ([]zebedee.Breadcrumb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBreadcrumb", ctx, userAccessToken, collectionID, lang, uri)
	ret0, _ := ret[0].([]zebedee.Breadcrumb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBreadcrumb indicates an expected call of GetBreadcrumb.
func (mr *MockZebedeeClientMockRecorder) GetBreadcrumb(ctx, userAccessToken, collectionID, lang, uri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBreadcrumb", reflect.TypeOf((*MockZebedeeClient)(nil).GetBreadcrumb), ctx, userAccessToken, collectionID, lang, uri)
}

// GetFigure mocks base method.
func (m *MockZebedeeClient) GetFigure(ctx context.Context, userAccessToken, collectionID, lang, uri string) (zebedee.Figure, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFigure", ctx, userAccessToken, collectionID, lang, uri)
	ret0, _ := ret[0].(zebedee.Figure)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFigure indicates an expected call of GetFigure.
func (mr *MockZebedeeClientMockRecorder) GetFigure(ctx, userAccessToken, collectionID, lang, uri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFigure", reflect.TypeOf((*MockZebedeeClient)(nil).GetFigure), ctx, userAccessToken, collectionID, lang, uri)
}

// MockArticlesApiClient is a mock of ArticlesApiClient interface.
type MockArticlesApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockArticlesApiClientMockRecorder
}

// MockArticlesApiClientMockRecorder is the mock recorder for MockArticlesApiClient.
type MockArticlesApiClientMockRecorder struct {
	mock *MockArticlesApiClient
}

// NewMockArticlesApiClient creates a new mock instance.
func NewMockArticlesApiClient(ctrl *gomock.Controller) *MockArticlesApiClient {
	mock := &MockArticlesApiClient{ctrl: ctrl}
	mock.recorder = &MockArticlesApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticlesApiClient) EXPECT() *MockArticlesApiClientMockRecorder {
	return m.recorder
}

// GetLegacyBulletin mocks base method.
func (m *MockArticlesApiClient) GetLegacyBulletin(ctx context.Context, userAccessToken, collectionID, lang, uri string) (*articles.Bulletin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLegacyBulletin", ctx, userAccessToken, collectionID, lang, uri)
	ret0, _ := ret[0].(*articles.Bulletin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLegacyBulletin indicates an expected call of GetLegacyBulletin.
func (mr *MockArticlesApiClientMockRecorder) GetLegacyBulletin(ctx, userAccessToken, collectionID, lang, uri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLegacyBulletin", reflect.TypeOf((*MockArticlesApiClient)(nil).GetLegacyBulletin), ctx, userAccessToken, collectionID, lang, uri)
}
